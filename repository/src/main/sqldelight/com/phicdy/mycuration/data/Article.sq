CREATE TABLE articles (
    _id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    url TEXT NOT NULL,
    status TEXT DEFAULT "unread" NOT NULL,
    point TEXT NOT NULL,
    date INTEGER NOT NULL,
    feedId INTEGER NOT NULL
);

insert:
INSERT INTO articles(title, url, status, point, date, feedId)
VALUES (?, ?, ?, ?, ?, ?);

selectLastInsertRowId:
SELECT last_insert_rowid();

getAll:
SELECT *
FROM articles;

getAllInRssOrderByDateDesc:
SELECT *
FROM articles
WHERE feedId = ?
ORDER BY date DESC;

getAllInRssOrderByDateAsc:
SELECT *
FROM articles
WHERE feedId = ?
ORDER BY date ASC;

getAllInUrl:
SELECT url
FROM articles
WHERE url IN ?
ORDER BY date ASC;

getAllUnreadArticlesOrderByDateDesc:
SELECT *
FROM articles
INNER JOIN feeds
LEFT OUTER JOIN favoriteArticles
ON (articles._id = favoriteArticles.articleId)
WHERE articles.status = "unread" AND articles.feedId = feeds._id
ORDER BY date DESC;

getAllUnreadArticlesOrderByDateAsc:
SELECT *
FROM articles
INNER JOIN feeds
LEFT OUTER JOIN favoriteArticles
ON (articles._id = favoriteArticles.articleId)
WHERE articles.status = "unread" AND articles.feedId = feeds._id
ORDER BY date ASC;

getTop300OrderByDateDesc:
SELECT *
FROM articles
INNER JOIN feeds
LEFT OUTER JOIN favoriteArticles
ON (articles._id = favoriteArticles.articleId)
WHERE articles.feedId = feeds._id
ORDER BY date DESC
LIMIT 300;

getTop300OrderByDateAsc:
SELECT *
FROM articles
INNER JOIN feeds
LEFT OUTER JOIN favoriteArticles
ON (articles._id = favoriteArticles.articleId)
WHERE articles.feedId = feeds._id
ORDER BY date ASC
LIMIT 300;

searchArticleOrderByDateDesc:
SELECT *
FROM articles
INNER JOIN feeds
LEFT OUTER JOIN favoriteArticles
ON (articles._id = favoriteArticles.articleId)
WHERE articles.title LIKE (:title) ESCAPE '$' AND articles.feedId = feeds._id
ORDER BY date DESC;

searchArticleOrderByDateAsc:
SELECT *
FROM articles
INNER JOIN feeds
LEFT OUTER JOIN favoriteArticles
ON (articles._id = favoriteArticles.articleId)
WHERE articles.title LIKE (:title) ESCAPE '$' AND articles.feedId = feeds._id
ORDER BY date ASC;

getArticlesOfFeedsDesc:
SELECT *
FROM articles
LEFT OUTER JOIN favoriteArticles
ON (articles._id = favoriteArticles.articleId)
WHERE articles.feedId = ?
ORDER BY date DESC;

getArticlesOfFeedsAsc:
SELECT *
FROM articles
LEFT OUTER JOIN favoriteArticles
ON (articles._id = favoriteArticles.articleId)
WHERE articles.feedId = ?
ORDER BY date ASC;

getUnreadArticlesOfFeedsDesc:
SELECT *
FROM articles
LEFT OUTER JOIN favoriteArticles
ON (articles._id = favoriteArticles.articleId)
WHERE articles.feedId = ? AND articles.status = "unread"
ORDER BY date DESC;

getUnreadArticlesOfFeedsAsc:
SELECT *
FROM articles
LEFT OUTER JOIN favoriteArticles
ON (articles._id = favoriteArticles.articleId)
WHERE articles.feedId = ? AND articles.status = "unread"
ORDER BY date ASC;

getUnreadArticlesOfCurationDesc:
SELECT *
FROM articles
INNER JOIN curationSelections
ON (curationSelections.curationId = ? AND articles.status = "unread" AND articles._id =  curationSelections.articleId)
INNER JOIN feeds
ON (articles.feedId = feeds._id)
ORDER BY date DESC;

getUnreadArticlesOfCurationAsc:
SELECT *
FROM articles
INNER JOIN curationSelections
ON (curationSelections.curationId = ? AND articles.status = "unread" AND articles._id =  curationSelections.articleId)
INNER JOIN feeds
ON (articles.feedId = feeds._id)
ORDER BY date ASC;

getArticlesOfCurationDesc:
SELECT *
FROM articles
INNER JOIN curationSelections
ON (curationSelections.curationId = ? AND articles._id =  curationSelections.articleId)
INNER JOIN feeds
ON (articles.feedId = feeds._id)
ORDER BY date DESC;

getArticlesOfCurationAsc:
SELECT *
FROM articles
INNER JOIN curationSelections
ON (curationSelections.curationId = ? AND articles._id =  curationSelections.articleId)
INNER JOIN feeds
ON (articles.feedId = feeds._id)
ORDER BY date ASC;

getCount:
SELECT COUNT(*)
FROM articles
WHERE feedId = ?;

getUnreadCount:
SELECT COUNT(*)
FROM articles
WHERE feedId = ? AND status = "unread";

deleteByFeedId:
DELETE FROM articles
WHERE feedId = ?;

updateReadStatusByTitle:
UPDATE articles
SET status = "read"
WHERE feedId = ? AND status = ? AND title LIKE ?;

updateReadStatusByUrl:
UPDATE articles
SET status = "read"
WHERE feedId = ? AND status = ? AND url LIKE ?;

updateReadStatusByTitleAndUrl:
UPDATE articles
SET status = "read"
WHERE feedId = ? AND status = ? AND title LIKE ? AND url LIKE ?;

updateReadStatusByFeedId:
UPDATE articles
SET status = "read"
WHERE feedId = ?;

updateAllReadStatus:
UPDATE articles
SET status = "read";

updateReadStatusById:
UPDATE articles
SET status = ?
WHERE _id = ?;

updatePointByUrl:
UPDATE articles
SET point = ?
WHERE url = ?;

selectChanges:
SELECT changes();

deleteAll:
DELETE FROM articles;

