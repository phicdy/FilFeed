// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = '1.4.0'
    ext.timber_version = '4.7.1'
    ext.coroutine_version = '1.4.2'
    ext.lifecycle_version = '2.2.0'
    ext.arch_core_testing_version = '2.1.0'
    ext.appcompat_version = '1.2.0'
    ext.fragment_ktx_version = '1.2.5'
    ext.preference_version = '1.1.1'
    ext.browser_version = '1.2.0'
    ext.recyclerview_version = '1.1.0'
    ext.constraintlayout_version = '2.0.4'
    ext.material_version = '1.2.1'
    ext.retrofit_version = '2.9.0'
    ext.rxjava_version = '2.2.19'
    ext.rxandroid_version = '2.2.19'
    ext.firebase_bom_version = '26.1.0'
    ext.jacoco_version = "0.8.5"
    ext.glideVer = '4.11.0'
    ext.work_version = '2.4.0'
    ext.dagger_hilt_version = '2.31.2-alpha'

    repositories {
        google().content {
            includeGroupByRegex 'com\\.google.*'
            includeGroupByRegex 'com\\.android\\.tools.*'
            includeGroup 'androidx.databinding'
            includeGroup 'com.android.databinding'
            includeGroup 'com.android'
            includeGroup 'com.squareup'
        }
        jcenter {
            content {
                includeGroupByRegex 'net\\.sf.*'
                includeGroupByRegex 'com\\.squareup.*'
                includeGroupByRegex 'com\\.googlecode.*'
                includeGroupByRegex 'com\\.google.*'
                includeGroupByRegex 'org\\.apache.*'
                includeGroupByRegex 'org\\.jetbrains.*'
                includeGroupByRegex 'org\\.ow2.*'
                includeGroupByRegex 'commons-.*'
                includeGroupByRegex 'javax.*'
                includeGroupByRegex 'com\\.sun.*'
                includeGroup 'commons-validator'
                includeGroup 'commons-logging'
                includeGroup 'commons-codec'
                includeGroup 'com.stanfy.spoon'
                includeGroup 'com.github.spullara.mustache.java'
                includeGroup 'com.github.gundy'
                includeGroup 'com.beust'
                includeGroup 'com.madgag'
                includeGroup 'de.undercouch'
                includeGroup 'it.unimi.dsi'
                includeGroup 'junit'
                includeGroup 'net.java'
                includeGroup 'org.lesscss'
                includeGroup 'org.mozilla'
                includeGroup 'org.glassfish.jaxb'
                includeGroup 'org.codehaus.plexus'
                includeGroup 'org.javassist'
                includeGroup 'org.jvnet.staxex'
                includeGroup 'org.codehaus.mojo'
                includeGroup 'org.sonatype.oss'
                includeGroup 'org.jdom'
                includeGroup 'org.jacoco'
                includeGroup 'org.antlr'
                includeGroup 'org.codehaus'
                includeGroup 'org.checkerframework'
                includeGroup 'org.bouncycastle'
                includeGroup 'org.json'
                includeGroup 'oro'
                includeGroup 'xerces'
                includeGroup 'xml-apis'
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath 'com.google.gms:google-services:4.3.4'
        classpath 'com.stanfy.spoon:spoon-gradle-plugin:1.2.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.4.1'
        classpath "com.google.dagger:hilt-android-gradle-plugin:$dagger_hilt_version"
    }
}

allprojects {
    repositories {
        google().content {
            includeGroupByRegex 'androidx.*'
            includeGroupByRegex 'com\\.google\\.android.*'
            includeGroupByRegex 'com\\.android\\.tools.*'
            includeGroup 'com.crashlytics.sdk.android'
            includeGroup 'com.google.firebase'
            includeGroup 'com.android.tools.lint'
            includeGroup 'com.android'
        }
        jcenter {
            content {
                includeGroupByRegex 'org\\.jetbrains.*'
                includeGroupByRegex 'com\\.squareup.*'
                includeGroupByRegex 'com\\.sun.*'
                includeGroupByRegex 'net\\.sf.*'
                includeGroupByRegex 'com\\.google.*'
                includeGroupByRegex 'org\\.apache.*'
                includeGroupByRegex 'org\\.codehaus.*'
                includeGroupByRegex 'org\\.ow2.*'
                includeGroupByRegex 'commons-.*'
                includeGroupByRegex 'javax.*'
                includeGroup 'com.jakewharton.retrofit'
                includeGroup 'com.jakewharton.timber'
                includeGroup 'com.facebook.stetho'
                includeGroup 'com.squareup.okhttp3'
                includeGroup 'com.github.bumptech.glide'
                includeGroup 'com.nhaarman.mockitokotlin2'
                includeGroup 'junit'
                includeGroup 'it.unimi.dsi'
                includeGroup 'net.sf.kxml'
                includeGroup 'net.bytebuddy'
                includeGroup 'net.ltgt.gradle.incap'
                includeGroup 'org.jsoup'
                includeGroup 'org.sonatype.oss'
                includeGroup 'org.junit'
                includeGroup 'org.jvnet.staxex'
                includeGroup 'org.checkerframework'
                includeGroup 'org.reactivestreams'
                includeGroup 'org.hamcrest'
                includeGroup 'org.jacoco'
                includeGroup 'org.glassfish.jaxb'
                includeGroup 'org.assertj'
                includeGroup 'org.mockito'
                includeGroup 'org.bouncycastle'
                includeGroup 'org.objenesis'
            }
        }
        maven {
            url "https://jitpack.io"
            content {
                includeGroup 'com.github.deano2390'
            }
        }
    }
}

subprojects {
    if (name == 'app') {
        apply plugin: 'com.android.application'
    } else {
        apply plugin: 'com.android.library'
    }
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-kapt'
    apply from: "$rootDir/jacoco.gradle"

    android {
        compileSdkVersion 30

        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 30
            versionName "1.8.4"
            versionCode 57

            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        kotlinOptions {
            jvmTarget = '1.8'
        }

        testOptions {
            unitTests.returnDefaultValues = true
        }

        lintOptions {
            // Bug in Gradle plugin 4.0.0
            disable 'RequiredSize'
        }
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

        testImplementation 'junit:junit:4.13.1'
        testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0'
        testImplementation 'org.assertj:assertj-core:3.11.1'
    }
}


apply plugin: 'jacoco'

jacoco {
    toolVersion = jacoco_version
}

task jacocoMerge(type: JacocoMerge) {
    gradle.afterProject { p, state ->
        if (p.rootProject != p && p.plugins.hasPlugin('jacoco')) {
            executionData file("${p.buildDir}/jacoco").listFiles().findAll {
                it.name.endsWith(".exec")
            }
        }
    }
}

def coverageExcludeFiles = ['**/R.class', '**/R$*.class', '**/com/android/**/*.*',
                            '**/BuildConfig.class', '**/*Activity*.class',
                            '**/*Fragment*.class', '**/*Receiver.class',
                            '**/*Manifest*.class', '**/*Application*.class',
                            '**/com/phicdy/mycuration/data/db/*.*',
                            '**/com/phicdy/mycuration/data/repository/*.*',
                            '**/com/phicdy/mycuration/data/network/*',
                            '**/com/phicdy/mycuration/di/*.*',
                            '**/com/phicdy/mycuration/domain/alarm/*.*',
                            '**/com/phicdy/mycuration/domain/entity/Filter*',
                            '**/com/phicdy/mycuration/domain/entity/Article.class',
                            '**/com/phicdy/mycuration/domain/entity/Curation.class',
                            '**/com/phicdy/mycuration/domain/entity/CurationCondition.class',
                            '**/com/phicdy/mycuration/domain/entity/CurationSelection.class',
                            '**/com/phicdy/mycuration/domain/entity/Feed*',
                            '**/com/phicdy/mycuration/domain/task/GetFeedIconTask*',
                            '**/com/phicdy/mycuration/presentation/view/*',
                            '**/com/phicdy/mycuration/util/log/*',
                            '**/com/phicdy/mycuration/tracker/*.*']
task jacocoMergedReport(type: JacocoReport, dependsOn: [tasks.jacocoMerge]) {
    executionData jacocoMerge.destinationFile
    def sources = []
    subprojects.forEach {
        sources += "${it.projectDir.path}/src/main/java"
    }
    getSourceDirectories().setFrom(files(sources))
    getClassDirectories().setFrom(
            fileTree(
                dir: ".",
                includes: ["**/build/intermediates/classes/debug/**",
                           "**/build/tmp/kotlin-classes/debug/**"],
                excludes: coverageExcludeFiles
            )
    )

    reports {
        xml.enabled = true
        html.enabled true
        csv.enabled false
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.destination file("${buildDir}/reports/jacoco/html")
    }
}

task testDebugUnitTest(dependsOn: [tasks.jacocoMergedReport])
