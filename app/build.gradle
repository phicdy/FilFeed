apply plugin: 'spoon'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

android {
    defaultConfig {
        applicationId "com.phicdy.mycuration"
        multiDexEnabled true

        testApplicationId "com.phicdy.mycuration.test"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias "$RELEASE_KEY_ALIAS"
            storeFile file("$RELEASE_STORE_FILE_PATH")
            keyPassword "$RELEASE_KEY_PASSWORD"
            storePassword "$RELEASE_STORE_PASSWORD"
        }
    }

    buildTypes {
        debug {
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release

            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }
        benchmark {
            initWith buildTypes.release
            signingConfig signingConfigs.debug
            matchingFallbacks = ['release']
        }
    }

    buildFeatures {
        viewBinding true
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/AL2.0', 'META-INF/LGPL2.1']
        }
    }


    namespace 'com.phicdy.mycuration'
    lint {
        abortOnError true
        disable 'MissingTranslation', 'RtlHardcoded'
        lintConfig = file("lint.xml")
    }
}

spoon {
    debug = true

    // To grant permissions to Android M >= devices */
    grantAllPermissions = true
}

dependencies {
    androidTestImplementation libs.uiautomator
    androidTestImplementation libs.androidx.test.core
    androidTestImplementation libs.androidx.test.runner
    androidTestImplementation libs.androidx.test.rules
    androidTestImplementation libs.androidx.test
    androidTestImplementation libs.spoon
    androidTestImplementation libs.espresso
    androidTestImplementation libs.assertj
    androidTestImplementation libs.coroutines.test
    androidTestImplementation project(':test_util')

    def composeBom = platform(libs.compose.bom)
    androidTestImplementation composeBom
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    implementation project(':core')
    implementation project(':di_common')
    implementation project(':domain')
    implementation project(':entity')
    implementation project(':feature_add_curation')
    implementation project(':feature_article_list')
    implementation project(':feature_curated_article_list')
    implementation project(':feature_curation_list')
    implementation project(':feature_feed_search')
    implementation project(':feature_feed_url_hook')
    implementation project(':feature_filter_list')
    implementation project(':feature_license')
    implementation project(':feature_register_filter')
    implementation project(':feature_rss_list')
    implementation project(':feature_setting')
    implementation project(':feature_top')
    implementation project(':repository')
    implementation project(':resource')
    implementation project(':util')
    implementation project(':tracker')
    implementation project(':advertisement')
    implementation project(':admob')
    implementation libs.appcompat
    implementation libs.work
    implementation libs.material
    implementation libs.constraintlayout
    implementation libs.preference

    implementation libs.coroutines.core
    implementation libs.coroutines.android

    debugImplementation libs.flipper
    debugImplementation libs.soloader
    releaseImplementation libs.flipper.noop

    implementation platform(libs.firebase.bom)
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'

    implementation libs.retrofit

    implementation libs.dagger.hilt
    kapt libs.dagger.hilt.compiler

    implementation libs.timber

    implementation libs.sqldelight
    implementation libs.sqlite
}

apply plugin: 'com.google.gms.google-services'

afterEvaluate { project ->
    project.tasks.assembleDebug {
        println "$COPY_BUILD_DESTINATION"
        project.copy {
            from 'build/outputs/apk/debug'
            into "$COPY_BUILD_DESTINATION"
            include '**/*.apk'
        }
    }
}
